<#@ template debug="true" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(TargetPath)" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="Entities" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
// <auto-generated /> <#= DateTime.Now.ToString(CultureInfo.InvariantCulture) #>

using Entities;

namespace Builders
{
<#
    var entityTypes = new Type[] {typeof (Entity)};

    foreach (var type in entityTypes)
    {
        GenerateBuilder(type);
    }
#>
}

<#+
    private void GenerateBuilder(Type type)
    {
#>
	public partial class <#=type.Name#>Builder
	{
		public <#=type.Name#> Build(IValueProvider valueProvider)
		{
			var result = new <#=type.Name#>();
			<#+
			var mapper = new ColumnNameToPropertyNameMapper();
			var columnNameToPropertyNames = mapper.CreateMap(type);
			foreach (var columnNameToProperty in columnNameToPropertyNames)
			{
				#>result.<#=columnNameToProperty.Value.Name#> = valueProvider.GetValue<<#=columnNameToProperty.Value.PropertyType.FullName#>>("<#=columnNameToProperty.Key#>");
			<#+
			}

			#>return result;
		}
	}
<#+
    }
#>

<#+

public Dictionary<string, PropertyInfo> CreateMap(Type type)
        {
            //Guard.ArgumentNotNull(type, "type");
            var result = new Dictionary<string, PropertyInfo>();
            var properties = type.GetProperties();
            foreach (var property in properties.Where(p => p.CanWrite))
            {
                var attribute = property.GetCustomAttributes(typeof(ColumnAttribute), true).FirstOrDefault() as ColumnAttribute;
                if (attribute != null)
                {
                    result[attribute.Name] = property;
                }
            }

            return result;
        }
#>