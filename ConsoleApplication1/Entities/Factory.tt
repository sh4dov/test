<#@ template debug="true" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(TargetPath)" #>
<#@ import namespace="Entities" #>
<#@ import namespace="System.Globalization" #>
<#@ output extension=".cs" #>
// <auto-generated /> <#= DateTime.Now.ToString(CultureInfo.InvariantCulture) #>

using Entities;

namespace Factories
{
<#
    var entityTypes = new []
        {
            typeof (Entity), 
			typeof (Entity2)
        };

    foreach (var type in entityTypes)
    {
        GenerateFactory(type);
    }
#>
}

<#+
    private void GenerateFactory(Type type)
    {
#>
	public partial class <#=type.Name#>Factory
	{
		public <#=type.Name#> Create(IValueProvider valueProvider)
		{
			var result = new <#=type.Name#>();
			BeforeBuild(result, valueProvider);

			<#+
			var mapper = new ColumnNameToPropertyMapper();
			var columnNameToPropertyNames = mapper.CreateMap(type);
			foreach (var columnNameToProperty in columnNameToPropertyNames)
			{
				#>result.<#=columnNameToProperty.Value.Name#> = valueProvider.GetValue<<#=columnNameToProperty.Value.PropertyType.FullName#>>("<#=columnNameToProperty.Key#>");
			<#+
			}

		#>
		
			AfterBuild(result, valueProvider);
			return result;
		}

		partial void AfterBuild(<#=type.Name#> value, IValueProvider valueProvider);
		partial void BeforeBuild(<#=type.Name#> value, IValueProvider valueProvider);
	}

<#+
    }
#>